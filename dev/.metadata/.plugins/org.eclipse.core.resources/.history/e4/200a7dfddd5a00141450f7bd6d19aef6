package com.openquartz.facedetect;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;

import org.opencv.android.BaseLoaderCallback;
import org.opencv.android.CameraBridgeViewBase.CvCameraViewFrame;
import org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2;
import org.opencv.android.LoaderCallbackInterface;
import org.opencv.android.OpenCVLoader;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfKeyPoint;
import org.opencv.core.MatOfRect;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.features2d.DescriptorExtractor;
import org.opencv.features2d.FeatureDetector;
import org.opencv.features2d.Features2d;
import org.opencv.imgproc.Imgproc;
import org.opencv.objdetect.CascadeClassifier;

import android.app.Activity;
import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.WindowManager;
import android.widget.Toast;

public class FdActivity extends Activity implements CvCameraViewListener2, GestureDetector.OnGestureListener 
{
	private static final String TAG = "OCVSample::Activity";
	private static final Scalar FACE_RECT_COLOR = new Scalar(255, 255, 255, 255); // white

	private Mat mRgba;
	private Mat mGray;
	// private File mCascadeFile;
	// private CascadeClassifier mJavaDetector;
	private FeatureDetector featureDetector;
	private DescriptorExtractor descriptorExtractor;
	private JView mOpenCvCameraView;

	private float mRelativeFaceSize = 0.2f;
	private int mAbsoluteFaceSize = 0;

	private GestureDetector mGestureDetector;
	
	private ArrayList<MatOfKeyPoint> logoKeypoints;
    private ArrayList<MatOfKeyPoint> imageKeypoints;
    
    private Mat logoDescriptors;
    private Mat imageDescriptors;
	
	

	/**
	 * Constructor
	 */
	public FdActivity() 
	{
		Log.i(TAG, "Instantiated new " + this.getClass());
	}

	/*
	 * (non-Javadoc)
	 * @see android.app.Activity#onCreate(android.os.Bundle)
	 */
	@Override
	public void onCreate(Bundle savedInstanceState) 
	{
		Log.i(TAG, "called onCreate");
		super.onCreate(savedInstanceState);

		this.getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

		this.setContentView(R.layout.face_detect_surface_view);

		// Important for Google Glass 
		mGestureDetector = new GestureDetector(this, this);

		mOpenCvCameraView = (JView) findViewById(R.id.fd_activity_surface_view);
		mOpenCvCameraView.setCvCameraViewListener(this);
	}

	/*
	 * (non-Javadoc)
	 * @see android.app.Activity#onPause()
	 */
	@Override
	public void onPause()
	{
		super.onPause();

		if (mOpenCvCameraView != null)
		{
			mOpenCvCameraView.disableView();
		}
	}

	/*
	 * (non-Javadoc)
	 * @see android.app.Activity#onResume()
	 */
	@Override
	public void onResume()
	{
		super.onResume();

		// Load default libopencv_java.so
		/*if (OpenCVLoader.initDebug())
		{
			Toast.makeText(getApplicationContext(), "Libraries Loaded!", Toast.LENGTH_SHORT).show();

			if (mLoaderCallback != null)
			{
				mLoaderCallback.onManagerConnected(LoaderCallbackInterface.SUCCESS);
			}
		}
		else
		{
			Toast.makeText(getApplicationContext(), "failed to load libraries", Toast.LENGTH_SHORT).show();
		}*/

		// Usual OpenCV Loader
		OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_2_4_10, this, mLoaderCallback);
	}

	/*
	 * (non-Javadoc)
	 * @see android.app.Activity#onDestroy()
	 */
	@Override
	public void onDestroy() 
	{
		super.onDestroy();

		if (mOpenCvCameraView != null)
		{
			mOpenCvCameraView.disableView();
		}
	}

	/**
	 * Create callback that is loaded if the OpenCV libraries load correctly
	 */
	private BaseLoaderCallback mLoaderCallback = new BaseLoaderCallback(this) 
	{
		/*
		 * (non-Javadoc)
		 * @see org.opencv.android.BaseLoaderCallback#onManagerConnected(int)
		 */
		@Override
		public void onManagerConnected(int status) 
		{
			switch (status) 
			{
			case LoaderCallbackInterface.SUCCESS:
			{
				Log.i(TAG, "OpenCV loaded successfully");

				featureDetector = FeatureDetector.create(FeatureDetector.BRISK);
				
				descriptorExtractor = DescriptorExtractor.create(DescriptorExtractor.FREAK);
				
				imageKeypoints = new ArrayList<MatOfKeyPoint>();
				
				imageDescriptors = new Mat();

				mOpenCvCameraView.enableView();
				
			} break;
			default:
			{
				super.onManagerConnected(status);
			} break;
			}
		}
	};

	/*
	 * (non-Javadoc)
	 * @see org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2#onCameraViewStarted(int, int)
	 */
	public void onCameraViewStarted(int width, int height) 
	{
		mGray = new Mat();
		mRgba = new Mat();
	}

	/*
	 * (non-Javadoc)
	 * @see org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2#onCameraViewStopped()
	 */
	public void onCameraViewStopped() 
	{
		mGray.release();
		mRgba.release();
	}

	/*
	 * (non-Javadoc)
	 * @see org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2#onCameraFrame(org.opencv.android.CameraBridgeViewBase.CvCameraViewFrame)
	 */
	public Mat onCameraFrame(CvCameraViewFrame inputFrame) 
	{
		mRgba = inputFrame.rgba();
		mGray = inputFrame.gray();
		
		new DoImageProcessing().execute(mGray);
		
		return mRgba;
	}
	
	
	private class DoImageProcessing extends AsyncTask<Mat, Void, Integer> {
		protected Mat doInBackground(Mat... params){
			
			
			Mat sourceImage = params[0];
			
			Mat mResultMat = new Mat();
			if (sourceImage != null){
								
				
				Imgproc.cvtColor(sourceImage, sourceImage, Imgproc.COLOR_BGRA2GRAY, 4);			
				
				featureDetector.detect(sourceImage, imageKeypoints.get(0));	
				
				descriptorExtractor.compute(sourceImage, imageKeypoints.get(0), imageDescriptors);
				
				Features2d.drawKeypoints(sourceImage, imageKeypoints.get(0), mResultMat);
					
				}	
			
			return mResultMat;
			
		}
		
		protected void onPostExecute(Integer result){
			
		}
	}
	
	
	

	/**
	 * Turn on touch events for Google Glass
	 */
	/*
	 * (non-Javadoc)
	 * @see android.app.Activity#onGenericMotionEvent(android.view.MotionEvent)
	 */
	@Override
	public boolean onGenericMotionEvent(MotionEvent event) 
	{
		if (mGestureDetector != null)
		{
			mGestureDetector.onTouchEvent(event);
		}

		return true;
	}

	/*
	 * (non-Javadoc)
	 * @see android.view.GestureDetector.OnGestureListener#onDown(android.view.MotionEvent)
	 */
	@Override
	public boolean onDown(MotionEvent e) 
	{
		return false;
	}

	/*
	 * (non-Javadoc)
	 * @see android.view.GestureDetector.OnGestureListener#onShowPress(android.view.MotionEvent)
	 */
	@Override
	public void onShowPress(MotionEvent e) { }

	/*
	 * (non-Javadoc)
	 * @see android.view.GestureDetector.OnGestureListener#onSingleTapUp(android.view.MotionEvent)
	 */
	@Override
	public boolean onSingleTapUp(MotionEvent e) 
	{
		return false;
	}

	/*
	 * (non-Javadoc)
	 * @see android.view.GestureDetector.OnGestureListener#onScroll(android.view.MotionEvent, android.view.MotionEvent, float, float)
	 */
	@Override
	public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) 
	{
		return false;
	}

	/*
	 * (non-Javadoc)
	 * @see android.view.GestureDetector.OnGestureListener#onLongPress(android.view.MotionEvent)
	 */
	@Override
	public void onLongPress(MotionEvent e) { }

	/**
	 * Special Thanks:
	 * https://github.com/space150/google-glass-playground/blob/master/OpenCVFaceDetection/src/com/space150/android/glass/opencvfacedetection/MainActivity.java
	 */
	/*
	 * (non-Javadoc)
	 * @see android.view.GestureDetector.OnGestureListener#onFling(android.view.MotionEvent, android.view.MotionEvent, float, float)
	 */
	@Override
	public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) 
	{
		

		return false;
	}
}
